/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.4.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale       1; // [m]

vertices
(
    ( -1.0  0.0  0.5 ) // 0
    (  1.5  0.0  0.5 ) // 1
    (  1.5  0.0 -0.5 ) // 2
    ( -1.0  0.0 -0.5 ) // 3
    ( -1.0  0.5  0.5 ) // 4
    (  1.5  0.5  0.5 ) // 5
    (  1.5  0.5 -0.5 ) // 6
    ( -1.0  0.5 -0.5 ) // 7
);

N1 1451; //234; //240;
N2  91;  //58; //60; 
N3  75;  //58; //60; 

blocks
(
    hex (0 1 2 3 4 5 6 7) ($N3 $N2 $N1) simpleGrading ( 1 1 1 ) //block 0

    //hex ( 0  1 13 12 11 10 22 23) (30 1 81) simpleGrading (0.002 1 20000)
    //hex ( 1  2 14 13 10  9 21 22) (25 1 81) simpleGrading (2 1 20000)
    //hex ( 2  3 15 14  9  8 20 21) (60 1 81) simpleGrading (1 1 20000)
    //hex ( 3  4 16 15  8  7 19 20) (25 1 81) simpleGrading (0.5 1 20000)
    //hex ( 4  5 17 16  7  6 18 19) (30 1 81) simpleGrading (500 1 20000)

    // Fine
    //hex ( 0  1 13 12 11 10 22 23) (240 1 648) simpleGrading (0.002 1 20000)
    //hex ( 1  2 14 13 10  9 21 22) (200 1 648) simpleGrading (2 1 20000)
    //hex ( 2  3 15 14  9  8 20 21) (480 1 648) simpleGrading (1 1 20000)
    //hex ( 3  4 16 15  8  7 19 20) (200 1 648) simpleGrading (0.5 1 20000)
    //hex ( 4  5 17 16  7  6 18 19) (240 1 648) simpleGrading (500 1 20000)
);

edges
(
        polyLine 0 1 // try: spline, with real numbers
        (
                (0	0       0)
                (0.1	0.0309016994    0)
                (0.2	0.0587785252    0)
                (0.3	0.0809016994    0)
                (0.4	0.0951056516    0)
                (0.5	0.1     0)
                (0.6	0.0951056516    0)
                (0.7	0.0809016994    0)
                (0.8	0.0587785252    0)
                (0.9	0.0309016994    0)
                (1	0       0)
        )

        polyLine 3 2 // try: spline, with real numbers
        (
                (0	0       1)
                (0.1	0.0309016994    1)
                (0.2	0.0587785252    1)
                (0.3	0.0809016994    1)
                (0.4	0.0951056516    1)
                (0.5	0.1     1)
                (0.6	0.0951056516    1)
                (0.7	0.0809016994    1)
                (0.8	0.0587785252    1)
                (0.9	0.0309016994    1)
                (1	0       1)
        )
);

//edges #codeStream
//{
//    codeInclude
//    #{
//        #include "pointField.H"
//        #include "mathematicalConstants.H"
//    #};
//
//    code
//    #{
//        const scalar xMin = -1.0;
//        const scalar xMax = 1.5;
//        const label nPoints = 1000;
//        const scalar dx = (xMax - xMin)/scalar(nPoints - 1);
//
//        os  << "(" << nl << "spline 0 1" << nl;
//        pointField profile(nPoints, Zero);
//
//        for (label i = 0; i < nPoints; ++i)
//        {
//            scalar x = xMin + i*dx;
//            profile[i].x() = x;
//            profile[i].y() = // write function ...
//        }
//        profile[i].z() = 0.5;
//        }
//        os << profile << nl;
//
//        os << "spline 3 2" << nl;
//        //profile.replace(2, 126);
//        os << profile << nl;
//        os  << ");" << nl;
//    #};
//};

//edges #codeStream
//{
//    codeInclude
//    #{
//        #include "pointField.H"
//        #include "mathematicalConstants.H"
//    #};
//
//    code
//    #{
//        constexpr scalar xMin = -1.0;
//        constexpr scalar xMax =  1.5;
//        constexpr scalar zMin = -0.5;
//        constexpr scalar zMax =  0.5;
//        constexpr label nPoints = 1000;
//        constexpr scalar dx = (xMax - xMin)/scalar(nPoints - 1);
//        constexpr scalar dz = (zMax - zMin)/scalar(nPoints - 1);
////        constexpr scalar pi = constant::mathematical::pi;
////
////        os  << "(" << nl << "spline 2 3" << nl;
////        pointField profile(nPoints);
////
////        for (label i = 0; i < nPoints; ++i)
////        {
////            scalar x = xMin + i*dx;
////            profile[i].x() = x;
////            profile[i].y() = 0.05*pow4(sin(pi*x/0.9 - (pi/3)));
////            profile[i].z() = 1;
////        }
////        os << profile << nl;
////
////        os << "spline 14 15" << nl;
////        profile.replace(2, -1);
////        os << profile << nl;
////
////        os  << ");" << nl;
//    #};
//};


boundary
(
    inlet
    {
        type        patch;
        faces
        (
            ( 0 3 7 4 )
        );
    }

    outlet
    {
        type        patch;
        faces
        (
            ( 1 2 6 5 )
        );
    }

    top
    {
        type        patch;
        faces
        (
            ( 4 5 6 7 )
        );
    }

    rightSide
    {
        type        patch;
        faces
        (
            ( 0 1 5 4 )
        );
    }

    bott
    {
        type        wall;
        faces
        (
            ( 0 1 2 3 )
        );
    }

    leftSide
    {
        type        patch;
        faces
        (
            ( 3 2 6 7 )
        );
    }

);

mergePatchPairs
();

// ************************************************************************* //
